1) Вы пришли в отделение банка, в котором обслуживание ведется строго по талончикам, который Вы получаете в автомате при входе.
При регистрации, Вы обязательно указываете ФИО, год рождения, тип операции который Вам необходимо выполнить в отделении (например
Консультация, Получение денежных средств, Вложение средств, Открытие депозита, Коммунальные платежи).
После регистрации - вы получаете номер талончика.
Обслуживание в банке ведется строго по номеру талончика в порядке их возрастания.
Создать множество, которое будет обслуживать класс Ticket.
Подумайте какой тип Set - а вы могли бы использовать для этой задачи.
Сымитируйте работу отделения банка. (лучше это задание перенести на урок с компараторами)


2)* В ресторане официанты подают заказы Order на кухню. Очень важно чтобы заказы брались в работу поварами строго в том порядке,
в котором они были переданы на кухню. Создайте множество (Set) заказов, которые будут передаваться на кухню официантом и реализуйте
механизм взятия в работу этих заказом поваром.
Используйте LinkedHashSet для решения этой задачи.
Характеристики Order определите самостоятельно.

3).**
Реализуйте класс UnidirectionIntLinkedList, в есть следующие характериcтики:
- int size; (текущий размер списка)
- Node (структура для хранения первого элемента списка)
В классе Node инкапулированы характеристики:
- int item; (для хранения данных)
- Node next; (для хранения ссылки на следующий объект хранения)
В классе UnidirectionIntLinkedList реализовать следующие методы:
- add(int): этот метод используется для добавления элемента в конец !!! списка.
- add(index, int): этот метод используется для добавления элемента по определенному индексу !!! в список.
- addFirst(int значение): добавляет элемент в начало списка.
- addLast(int значение): добавляет элемент в конец списка.
- int get(int index): получить элемент по index.
- int set(int index, int значение): установить значение элемента по index.
- int remove(int index): удалить элемент со списка, возвратить значение удаленного элемента
- removeFirst(): удалить элемент с начала списка.
- removeLast(): удалить элемент с конца списка.
- int indexOf(int значение): вернуть индекс первого вхождение элемента со значением
- bool contains(int значение): вернуть true, если значение есть в списке
- void clear(): очистить список